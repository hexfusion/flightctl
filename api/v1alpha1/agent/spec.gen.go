// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
