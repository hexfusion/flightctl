// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
